#!/usr/bin/env bash
# Written by: dakkshesh07
# AntMan v2.4 (A Nonsensical Toolchain Manager)
# Copyright (c) 2022 Dakkshesh <dakkshesh5@gmail.com>
#
#			GNU GENERAL PUBLIC LICENSE
#			 Version 3, 29 June 2007
#
# Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
# Everyone is permitted to copy and distribute verbatim copies
# of this license document, but changing it is not allowed.
set -e
shopt -s inherit_errexit

ANTMAN_VER="v2.4"

# A function to showcase the options provided for args-based usage.
helpmenu() {
    SCRIPT_NAME="$0"
    if [[ $LOCAL_SCRIPT -eq 0 ]]; then
        SCRIPT_NAME="./antman"
    fi
    echo -e "\e[1m
*** A Nonsensical Toolchain Manager ${ANTMAN_VER}, by Dakkshesh07 ***\e[0m
Usage :
      ${SCRIPT_NAME} [args]
Arguments :
 --sync=<tag>   : Download and sync latest toolchain build from Neutron-Clang repos.
                  By default AntMan will sync latest build,
                  To sync to a specific build pass appropriate build tag in <tag>.
                  Example: ${SCRIPT_NAME} --sync
                  Example: ${SCRIPT_NAME} --sync=latest
                  Exmaple: ${SCRIPT_NAME} --sync=42069420

 -S=<tag>       : Alias for --sync=<tag>

 --checkupdate  : Run a dry check to see if any toolchain update is available on Neutron-Clang repos.

 -C             : Alias for --checkupdate

 --update=<tag> : Download updated toolchain build from Neutron-Clang repos and upgrade.
                  By default AntMan will upgrade to latest build,
                  To upgrade to a specific build pass appropriate build tag in <tag>.
                  Example: ${SCRIPT_NAME} --update
                  Example: ${SCRIPT_NAME} --update=latest
                  Exmaple: ${SCRIPT_NAME} --update=42069420

 -U=<tag>       : Alias for --update=<tag>

 --patch=[bolt|unbolt|glibc]
                : Patch synced toolchain as per requirments.
                  Curerently supported patches:
                    unbolt: Patch toolchain to use non BOLT optimized binaries.
                    bolt: Patch toolchain to use BOLT optimized binaries (default).
                    glibc: Patch toolchain to workaround glibc requirments.
                  Example: ${SCRIPT_NAME} --patch=unbolt
                  Example: ${SCRIPT_NAME} --patch=bolt
                  Example: ${SCRIPT_NAME} --patch=glibc

 -P=[bolt|unbolt|glibc]
                : Alias for --patch=[bolt|unbolt|glibc]

 --delete       : Delete all clang related files.
                  AntMan script itself wont be deleted when this command is ran.

 -D             : Alias for --delete

 --info         : Show local build information.

 -I             : Alias for --info

 --noconfirm    : Do not ask for confirmation.

 --noprogress   : Do not show progress bar.

 --noaxel       : Do not use axel to download tars even if available.

 --help         : Show this help menu.

 -H             : Alias for --help.

 --version      : Show AntMan version."
}

# A function to print bold logs
printlog() {
    echo -e "\e[1m
$1\e[0m"
}

# A function to check if command exists
cmd_check() {
    command -v "$1" >/dev/null 2>&1
}

# A function to verify dependencies
pkg_check() {
    if [[ -n $1 ]] && cmd_check "$1"; then
        echo "$1: yes"
    else
        echo "$1: no"
        printlog "Error: $1 not found!"
        exit 1
    fi
}

# A function to check axel availability and set the default download utility
DL_UTILITY="wget"
axel_check() {
    if [[ ${NOAXEL} -eq 0 ]] && cmd_check "axel"; then
        printlog "axel was found on the system and will be used to download the tars quickly..."
        echo "if you wish to disable this use the --noaxel flag."
        DL_UTILITY="axel"
    fi
}

# A function for converting dated build tags to unix timestamps
tag_to_unix_ts() {
    local dt yr mt dy
    dt="$1"
    yr=${dt:4:4}
    mt=${dt:2:2}
    dy=${dt::2}
    date -d "${yr}-${mt}-${dy}" +%s
}

# A function to compare timestamps
can_update() {
    local tag_a tag_b
    tag_a=$(tag_to_unix_ts "$1")
    tag_b=$(tag_to_unix_ts "$2")
    if [[ ${tag_a} -lt ${tag_b} ]]; then
        true
    elif [[ ${tag_b} -lt ${tag_a} ]]; then
        false
    fi
}

# A function to fetch/download Neutron clang builds from remote repos
sync_tar() {
    printlog "Checking for system requirements..."
    pkg_check "zstd"
    pkg_check "tar"
    pkg_check "wget"
    pkg_check "sha256sum"
    axel_check

    printlog "Fetching build info..."
    echo "Requested Tag: $1"

    if [[ $1 == "latest" ]]; then
        r_tag=$(wget -q --output-document - "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/latest.txt" | grep -A1 tag | tail -n1)
        echo "Latest Tag: ${r_tag}"
    else
        if ! wget -q "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/$1-info.txt" -O- >/dev/null; then
            echo "Error: $1 is not a valid tag"
            exit 1
        fi
        r_tag=$1
    fi

    clang_ver=$(wget -q --output-document - "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/${r_tag}-info.txt" | grep -A1 clang-ver | tail -n1)
    b_date=$(wget -q --output-document - "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/${r_tag}-info.txt" | grep -A1 date | tail -n1)
    llvm_c=$(wget -q --output-document - "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/${r_tag}-info.txt" | grep -A1 llvm-commit | tail -n1)
    binutils_ver=$(wget -q --output-document - "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/${r_tag}-info.txt" | grep -A1 binutils-ver | tail -n1)
    binutils_c=$(wget -q --output-document - "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/${r_tag}-info.txt" | grep -A1 binutils-commit | tail -n1)
    t_glibc=$(wget -q --output-document - "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/${r_tag}-info.txt" | grep -A1 host-glibc | tail -n1)
    t_size=$(wget -q --output-document - "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/${r_tag}-info.txt" | grep -A1 size | tail -n1)
    t_shasum=$(wget -q --output-document - "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/${r_tag}-info.txt" | grep -A1 shasum | tail -n1)

    echo "Build Date: ${b_date}"
    echo "Clang Version: ${clang_ver}"
    echo "LLVM commit at: ${llvm_c}"
    echo "Binutils Version: ${binutils_ver}"
    echo "Binutils commit at: ${binutils_c}"
    echo "Glibc requirement: ${t_glibc}"
    echo "Build size: ${t_size}"
    echo "Build sha256sum: ${t_shasum}"

    host_glibc="$(ldd --version | head -n1 | grep -oE '[^ ]+$')"

    if [[ ${host_glibc//./} -lt ${t_glibc//./} ]]; then
        printlog "Warning: host glibc ($(ldd --version | head -n1 | grep -oE '[^ ]+$')) is older than the minimum required version (${t_glibc})"
        printlog "Workaround this by patching toolchain using '$0 --patch=glibc'"
    fi

    printlog "Fetching build tar..."
    if [[ $DL_UTILITY == "axel" ]]; then
        axel "${AXEL_ARGS[@]}" "https://github.com/Neutron-Toolchains/clang-build-catalogue/releases/download/${r_tag}/neutron-clang-${r_tag}.tar.zst"
    else
        wget "${WGET_ARGS[@]}" "https://github.com/Neutron-Toolchains/clang-build-catalogue/releases/download/${r_tag}/neutron-clang-${r_tag}.tar.zst"
    fi

    printlog "Checking file integrity of the tar..."
    if ! echo "${t_shasum} neutron-clang-${r_tag}.tar.zst" | sha256sum -c -; then
        printlog "Error: File integrity check failed" >&2
        exit 1
    fi

    printlog "Extracting tar..."
    tar -I zstd -xf "neutron-clang-${r_tag}.tar.zst"

    wget --quiet -O build.info "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/${r_tag}-info.txt"
    echo -e "\n[tag]\n${r_tag}" >>"build.info"

    printlog "Cleaning up..."
    rm -rf "neutron-clang-${r_tag}.tar.zst"
}

# A function to check for updates
update_check() {
    printlog "Checking for system requirements..."
    pkg_check "wget"
    printlog "Checking for updates..."
    l_tag=$(grep -A1 tag build.info | tail -n1)
    r_tag=$(wget -q --output-document - "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/latest.txt" | grep -A1 tag | tail -n1)
    if [[ ${l_tag} == "${r_tag}" ]]; then
        echo "Already up-to-date!"
        exit 0
    elif can_update "${l_tag}" "${r_tag}"; then
        printlog "New update found!"
        echo "Update tag: ${r_tag}"
        echo -e "\nRun $0 -Uy to upgrade"
    else
        printlog "Error: The requested tag (${r_tag}) is older than the installed toolchain build (${l_tag})"
        exit 1
    fi
}

# A function to delete toolchain files
delete() {
    c_dir=$(pwd)
    printlog "Cleaning toolchain files..."
    echo "Everything in ${c_dir}/ except this script itself would be deleted!"
    if [[ ${NOCONFIRM} -eq 0 ]]; then
        while true; do
            read -rp "Proceed? [Y/N] " yn
            case ${yn} in
                [Yy]*)
                    printlog "Cleaning..."
                    find . ! -name "$(basename "$0")" -delete
                    break
                    ;;
                [Nn]*) exit 0 ;;
                *) echo "Please answer yes or no." ;;
            esac
        done
    else
        printlog "Cleaning..."
        find . ! -name "$(basename "$0")" -delete
    fi
}

# A function to install toolchain updates
upgrade_build() {
    printlog "Checking for system requirements..."
    pkg_check "wget"

    printlog "Checking for updates..."
    l_tag=$(grep -A1 tag build.info | tail -n1)
    if [[ $1 == "latest" ]]; then
        r_tag=$(wget -q --output-document - "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/latest.txt" | grep -A1 tag | tail -n1)
    else
        if ! wget -q "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/$1-info.txt" -O- >/dev/null; then
            printlog "Error: $1 is not a valid tag"
            exit 1
        fi
        r_tag=$1
    fi
    if [[ ${l_tag} == "${r_tag}" ]]; then
        printlog "Nothing to do, Already up-to-date"
        exit 0
    elif can_update "${l_tag}" "${r_tag}"; then
        printlog "New update found!"
        echo "New tag: ${r_tag}"
        printlog "Removing old toolchain files using $0 -D"
        delete
        printlog "Downloading new toolchain build using $0 -S=${r_tag}"
        sync_tar "${r_tag}"
        echo -e "\nToolchain upgraded to ${r_tag} build!"
    else
        printlog "Error: The requested tag (${r_tag}) is older than the installed toolchain build (${l_tag})"
        exit 1
    fi
}

# A function to get toolchain info
show_info() {
    printlog "Getting toolchain information from build.info..."
    if [[ -f "build.info" ]]; then
        echo ""
        echo "Build date: $(grep -A1 date build.info | tail -n1)"
        echo "Build tag: $(grep -A1 tag build.info | tail -n1)"
        echo "Clang version: $(grep -A1 clang-ver build.info | tail -n1)"
        echo "LLVM commit at: $(grep -A1 llvm-commit build.info | tail -n1)"
        echo "Binutils version: $(grep -A1 binutils-ver build.info | tail -n1)"
        echo "Binutils commit at: $(grep -A1 binutils-commit build.info | tail -n1)"
        echo "Glibc requirement: $(grep -A1 host-glibc build.info | tail -n1)"
    else
        printlog "Error: build.info not found! Resync the toolchain."
        exit 1
    fi
}

# A function to BOLT/un-BOLT toolchain
boltify() {
    CLANG_BIN=$(basename "$(readlink -f bin/clang)")
    if [[ $1 == "bolt" ]]; then
        if [[ -f "bin/${CLANG_BIN}.bolt" ]]; then
            if [[ -f "bin/${CLANG_BIN}" ]]; then
                mv bin/"${CLANG_BIN}" bin/"${CLANG_BIN}.org"
                mv bin/"${CLANG_BIN}.bolt" bin/"${CLANG_BIN}"
            else
                printlog "Error: 'bin/${CLANG_BIN}' not found!"
            fi
        else
            printlog "Error: 'bin/${CLANG_BIN}.bolt' not found!"
        fi
        if [[ -f "bin/lld.bolt" ]]; then
            if [[ -f "bin/lld" ]]; then
                mv bin/lld bin/"lld.org"
                mv bin/"lld.bolt" bin/lld
            else
                printlog "Error: 'bin/lld' not found!"
            fi
        else
            printlog "Warning: 'bin/lld.bolt' not found, Skipped!"
        fi
    elif [[ $1 == "unbolt" ]]; then
        if [[ -f "bin/${CLANG_BIN}.org" ]]; then
            if [[ -f "bin/${CLANG_BIN}" ]]; then
                mv bin/"${CLANG_BIN}" bin/"${CLANG_BIN}.bolt"
                mv bin/"${CLANG_BIN}.org" bin/"${CLANG_BIN}"
            else
                printlog "Error: 'bin/${CLANG_BIN}' not found!"
            fi
        else
            printlog "Error: 'bin/${CLANG_BIN}.org' not found!"
        fi
        if [[ -f "bin/lld.org" ]]; then
            if [[ -f "bin/lld" ]]; then
                mv bin/lld bin/"lld.bolt"
                mv bin/"lld.org" bin/lld
            else
                printlog "Error: 'bin/lld' not found!"
            fi
        else
            printlog "Warning: 'bin/lld.org' not found, Skipped!"
        fi
    fi
}

# A function to patch toolchain to workaround old glibc issues
glibc_patcher() {
    printlog "Checking for system requirements..."
    pkg_check "wget"
    pkg_check "bsdtar"
    WORK_DIR=$1
    axel_check
    fetch_and_uncompress() {
        rm -rf /tmp/tmp_antman.tar
        if [[ $DL_UTILITY == "axel" ]]; then
            axel -q -O"/tmp/tmp_antman.tar" "${1}"
        else
            wget -q -O"/tmp/tmp_antman.tar" "${1}"
        fi
        bsdtar -C "${HOME}"/.neutron-tc/"${2}" -xf /tmp/tmp_antman.tar
        rm -rf /tmp/tmp_antman.tar
    }

    printlog "Downloading patchelf binary from NixOS repos..."
    PATCHELF_VER="0.18.0"
    mkdir -p "${HOME}"/.neutron-tc/patchelf-temp
    fetch_and_uncompress "https://github.com/NixOS/patchelf/releases/download/${PATCHELF_VER}/patchelf-${PATCHELF_VER}-x86_64.tar.gz" patchelf-temp
    mv "${HOME}"/.neutron-tc/patchelf-temp/bin/patchelf "${HOME}"/.neutron-tc/
    rm -rf "${HOME}"/.neutron-tc/patchelf-temp

    printlog "Downloading latest libs from ArchLinux repos..."
    mkdir "${HOME}"/.neutron-tc/glibc &>/dev/null || (rm -rf "${HOME}"/.neutron-tc/glibc && mkdir "${HOME}"/.neutron-tc/glibc)
    fetch_and_uncompress https://archlinux.org/packages/core/x86_64/glibc/download glibc
    fetch_and_uncompress https://archlinux.org/packages/core/x86_64/lib32-glibc/download glibc
    fetch_and_uncompress https://archlinux.org/packages/core/x86_64/gcc-libs/download glibc
    fetch_and_uncompress https://archlinux.org/packages/core/x86_64/lib32-gcc-libs/download glibc
    ln -svf "${HOME}"/.neutron-tc/glibc/usr/lib "${HOME}"/.neutron-tc/glibc/usr/lib64

    printlog "Patching libs..."
    for bin in $(find "${HOME}"/.neutron-tc/glibc -type f -exec file {} \; | grep 'ELF .* interpreter' | awk '{print $1}'); do
        bin="${bin::-1}"
        echo "Patching: ${bin}"
        "${HOME}"/.neutron-tc/patchelf --set-rpath "${HOME}"/.neutron-tc/glibc/usr/lib --force-rpath --set-interpreter "${HOME}"/.neutron-tc/glibc/usr/lib/ld-linux-x86-64.so.2 "${bin}"
    done

    printlog "Patching Toolchain..."
    for bin in $(find "${WORK_DIR}" -type f -exec file {} \; | grep 'ELF .* interpreter' | awk '{print $1}'); do
        bin="${bin::-1}"
        echo "Patching: ${bin}"
        "${HOME}"/.neutron-tc/patchelf --add-rpath "${HOME}"/.neutron-tc/glibc/usr/lib --force-rpath --set-interpreter "${HOME}"/.neutron-tc/glibc/usr/lib/ld-linux-x86-64.so.2 "${bin}"
    done

    printlog "Cleaning..."
    rm -rf "${HOME}"/.neutron-tc/patchelf
    printlog "Done"
}

LOCAL_SCRIPT=1
if [[ $0 =~ /dev/fd/[0-9]+ ]]; then
    LOCAL_SCRIPT=0
fi

NOCONFIRM=0
if [[ $* =~ "--noconfirm" ]]; then
    NOCONFIRM=1
fi

NOAXEL=0
if [[ $* =~ "--noaxel" ]]; then
    NOAXEL=1
fi

WGET_ARGS=("--quiet")
AXEL_ARGS=()
# Extract wget major version and use supported progress flag accordingly.
# Also set axel args according to flags passed by user.
if [[ ! $* =~ "--noprogress" ]]; then
    WGET_VER=$(wget --version | head -n 1 | cut -d ' ' -f 3 | cut -d '.' -f 1)

    if [[ $WGET_VER -ge 2 ]]; then
        WGET_ARGS+=("--force-progress")
    else
        WGET_ARGS+=("--show-progress")
    fi
else
    AXEL_ARGS=("--quiet")
fi

for arg in "$@"; do
    case "${arg}" in
        "-S"* | "--sync"*)
            tag="${arg#*=}"
            if [[ ${tag} == "-S" ]] || [[ ${tag} == "--sync" ]]; then
                tag="latest"
            fi
            axel_check
            sync_tar "${tag}"
            echo -e "\nToolchain build ${r_tag} synced!"
            exit 0
            ;;
        "--checkupdates" | "-C")
            update_check
            exit 0
            ;;
        "-U"* | "--update"*)
            u_tag="${arg#*=}"
            if [[ ${u_tag} == "-U" ]] || [[ ${u_tag} == "--update" ]]; then
                u_tag="latest"
            fi
            upgrade_build "${u_tag}"
            exit 0
            ;;
        "-P"* | "--patch"*)
            option="${arg#*=}"
            if [[ ${option} == "-P" ]] || [[ ${option} == "--patch" ]]; then
                echo "Error: ${option} requires an argument."
                exit 1
            elif [[ ${option} == "bolt" ]] || [[ ${option} == "unbolt" ]]; then
                boltify "${option}"
            elif [[ ${option} == "glibc" ]]; then
                glibc_patcher "$(pwd)"
            else
                echo -e "\e[1mError: Invalid argument '$1'\e[0m"
                exit 1
            fi
            exit 0
            ;;
        "-D" | "--delete")
            delete
            exit 0
            ;;
        "-I" | "--info")
            show_info
            exit 0
            ;;
        "--version")
            echo "A Nonsensical Toolchain Manager ${ANTMAN_VER}, by Dakkshesh07"
            exit 0
            ;;
        "-H" | "--help")
            helpmenu
            exit 0
            ;;
        *)
            echo "Invalid argument passed: '${arg}' Run '$0 --help' to view available options."
            exit 1
            ;;
    esac
done

helpmenu
exit 1
